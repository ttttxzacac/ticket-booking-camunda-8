name: CI/CD Pipeline for Ticket Booking System

on:
  push:
    branches:
      - aws-dev  # 当代码 push 到 aws-dev 分支时触发

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # 拉取最新代码

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'  # 使用 Temurin 发行版的 Java 11

      - name: Build Java project
        run: mvn clean package -DskipTests
        working-directory: booking-service-java  # 在 Java 目录下运行

      - name: Run Java Tests
        run: mvn test
        working-directory: booking-service-java  # 运行 Java 单元测试

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14  # 使用 Node.js 14

      - name: Install dependencies & build TypeScript project
        run: |
          npm install
          npm run build
        working-directory: fake-services-nodejs  # 在 Node.js 目录下运行

  docker:
    runs-on: ubuntu-latest
    needs: build  # 依赖 build 任务成功后执行
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      # 构建 & 推送 Java (Spring Boot) Docker 镜像
      - name: Build and Push Java Docker Image
        run: |
          docker build -t booking-service .
          docker tag booking-service:latest ${{ secrets.ECR_REGISTRY }}/booking-service:latest
          docker push ${{ secrets.ECR_REGISTRY }}/booking-service:latest
        working-directory: booking-service-java

      # 构建 & 推送 Node.js (TypeScript) Docker 镜像
      - name: Build and Push Node.js Docker Image
        run: |
          docker build -t fake-services-nodejs .
          docker tag fake-services-nodejs:latest ${{ secrets.ECR_REGISTRY }}/fake-services-nodejs:latest
          docker push ${{ secrets.ECR_REGISTRY }}/fake-services-nodejs:latest
        working-directory: fake-services-nodejs

  deploy:
    runs-on: ubuntu-latest
    needs: docker  # 依赖 docker 任务成功后执行
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Java Service to ECS
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service booking-service --force-new-deployment

      - name: Deploy Node.js Service to ECS
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service fake-services-nodejs --force-new-deployment
