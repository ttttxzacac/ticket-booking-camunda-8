name: CI/CD Pipeline for Ticket Booking System

on:
  push:
    branches:
      - aws-dev   # Trigger the workflow when code is pushed to the aws-dev branch

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3 # Pull the latest code from GitHub

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'  # Use the Temurin distribution for Java 17

      - name: Build Java project
        run: mvn clean package -DskipTests
        working-directory: booking-service-java  # Run Maven build in the Java project directory

      - name: Run Java Tests
        run: mvn test
        working-directory: booking-service-java  # Execute unit tests for Java

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14  # Use Node.js version 14

      - name: Install dependencies & build TypeScript project
        run: |
          npm install
          npm run build
        working-directory: fake-services-nodejs  #  Run npm install and build in the Node.js directory

  docker:
    runs-on: ubuntu-latest
    needs: build  # This job depends on the successful execution of the build job
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      # Build & push the Java (Spring Boot) Docker image
      - name: Build and Push Java Docker Image
        run: |
          docker build -t booking-service .
          docker tag booking-service:latest ${{ secrets.ECR_REGISTRY }}/ticket-booking/ticket-booking-repo:booking-service-latest
          docker push ${{ secrets.ECR_REGISTRY }}/ticket-booking/ticket-booking-repo:booking-service-latest
        working-directory: booking-service-java

      # Build & push the Node.js (TypeScript) Docker image
      - name: Build and Push Node.js Docker Image
        run: |
          docker build -t fake-services-nodejs .
          docker tag fake-services-nodejs:latest ${{ secrets.ECR_REGISTRY }}/ticket-booking/ticket-booking-repo:fake-services-nodejs-latest
          docker push ${{ secrets.ECR_REGISTRY }}/ticket-booking/ticket-booking-repo:fake-services-nodejs-latest
        working-directory: fake-services-nodejs

      #  Build & push the RabbitMQ Docker image (using the official RabbitMQ image)
      - name: Build and Push RabbitMQ Docker Image
        run: |
          docker pull rabbitmq:3-management
          docker tag rabbitmq:3-management ${{ secrets.ECR_REGISTRY }}/ticket-booking/ticket-booking-repo:rabbitmq-latest
          docker push ${{ secrets.ECR_REGISTRY }}/ticket-booking/ticket-booking-repo:rabbitmq-latest



  deploy:
    runs-on: ubuntu-latest
    needs: docker  # This job depends on the successful execution of the docker job
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Deploy RabbitMQ service to ECS
      - name: Deploy RabbitMQ Service to ECS
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service rabbitmq-service --force-new-deployment --desired-count 1

      # Wait for RabbitMQ to finish
      - name: Wait for RabbitMQ Service to be stable
        run: |
          aws ecs wait services-stable --cluster ${{ secrets.ECS_CLUSTER_NAME }} --services rabbitmq-service

      # Deploy Java Service to ECS
      - name: Deploy Java Service to ECS
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service booking-service-java --force-new-deployment --desired-count 2

      # Deploy Node.js Service to ECS
      - name: Deploy Node.js Service to ECS
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service fake-services-nodejs --force-new-deployment --desired-count 2

      # Configure Auto Scaling for Java Service
      - name: Configure Auto Scaling for Java Service
        run: |
          aws application-autoscaling register-scalable-target \
            --service-namespace ecs \
            --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/${{ secrets.ECS_CLUSTER_NAME }}/booking-service-java \
            --min-capacity 2 \
            --max-capacity 5
          
          aws application-autoscaling put-scaling-policy \
            --service-namespace ecs \
            --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/${{ secrets.ECS_CLUSTER_NAME }}/booking-service-java \
            --policy-name cpu-scaling-policy \
            --policy-type TargetTrackingScaling \
            --target-tracking-scaling-policy-configuration '{
              "TargetValue": 80.0,
              "PredefinedMetricSpecification": {
                "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
              },
              "ScaleOutCooldown": 60,
              "ScaleInCooldown": 60
            }'

      # Configure Auto Scaling for Node.js Service
      - name: Configure Auto Scaling for Node.js Service
        run: |
          aws application-autoscaling register-scalable-target \
            --service-namespace ecs \
            --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/${{ secrets.ECS_CLUSTER_NAME }}/fake-services-nodejs \
            --min-capacity 2 \
            --max-capacity 5
          
          aws application-autoscaling put-scaling-policy \
            --service-namespace ecs \
            --scalable-dimension ecs:service:DesiredCount \
            --resource-id service/${{ secrets.ECS_CLUSTER_NAME }}/fake-services-nodejs \
            --policy-name cpu-scaling-policy \
            --policy-type TargetTrackingScaling \
            --target-tracking-scaling-policy-configuration '{
              "TargetValue": 80.0,
              "PredefinedMetricSpecification": {
                "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
              },
              "ScaleOutCooldown": 60,
              "ScaleInCooldown": 60
            }'



